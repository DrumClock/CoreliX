[gcode_macro TEST_]
gcode: 

     # {action_respond_info("" % ())}
     {% set user_vars = printer["gcode_macro VARIABLE"] %}
     
 {% for stepper in printer['motion_report'].steppers|sort %}  
 	 {% set endstop_pin = (printer.configfile.config[stepper].endstop_pin)|replace(":", ",") %}   ; tmc2209_stepper_y,virtual_endstop
           
       {% if 'virtual_endstop' ==  endstop_pin.split(',')[1] %} 
         {% set driver = endstop_pin.split('_')[0] %}    ; tmc2209 
         {% set run_current = printer[("%s %s" % (driver,stepper))].run_current|float %}

          {% set msg = ("%s - Set %s driver run current to %s A" % (stepper,driver,run_current|round(2))) %}
          RESPOND MSG='{msg}'             
           #SET_TMC_CURRENT STEPPER={stepper} CURRENT={run_current}
	   {% endif %}     
       
    {% endfor %}	
    
#################################################################################  

[gcode_macro TEST_XY]
gcode:

 {% set act_speed = printer.gcode_move.speed %}  

 {% set max_cfg =   printer['toolhead'].max_velocity %}
 {% set max_accel = printer['toolhead'].max_accel %}

 {% set max_speed = params.SPEED|default(max_cfg|int) %}
 
 {% if "xy" not in printer.toolhead.homed_axes %}
   G28
 {% endif %} 

 {% set msg_1 =(" ACCEL = %s mm/s2 " % max_accel) %}
 {% set msg_2 =(" VELOCITY = %s mm/s " % max_speed ) %}
   RESPOND MSG='{msg_2}' 
   RESPOND MSG='{msg_1}' 

  G1 X10 Y10 F{max_speed * 60 }  
  G1 X260 Y290

  G1 X10 
  G1 Y10
  G1 X260
  G1 Y290

  G1 X10 Y10
  G1 X260 Y290

  G1 X10 
  G1 Y10
  G1 X260
  G1 Y290

  G1 X135 Y150
  G1 F{act_speed}
  
#-------------------------------------------------------------

[gcode_macro TEST_STEPPER_Z]
gcode:

  STEPPER_BUZZ STEPPER=stepper_z
  STEPPER_BUZZ STEPPER=stepper_z1
  STEPPER_BUZZ STEPPER=stepper_z2
  STEPPER_BUZZ STEPPER=stepper_z3

#-------------------------------------------------------------

[gcode_macro TEST_PROBE]
gcode:

  ### check for offset probe in configfile   
  {% set probe_x_offset = (printer.configfile.config[printer['probe'].name].x_offset)|float %}
  {% set probe_y_offset = (printer.configfile.config[printer['probe'].name].y_offset)|float %}

   {% set msg = ("%s = offset - x%s y%s" % (printer['probe'].name, probe_x_offset, probe_y_offset)) %}
      RESPOND MSG='{msg}'


#--------------------------------------------------------------------

  